/*
Given a List of words, return the words that can be typed using letters of alphabet on a single row of a U.S. QWERTY keyboard like the image below.

(American qwerty keyboard image)

Example 1:
Input: ["Hello", "Alaska", "Dad", "Peace"]
Output: ["Alaska", "Dad"]
Note:
You may use one character in the keyboard more than once.
You may assume the input string will only contain letters of alphabet.
*/

package main

import (
	"fmt"
	"strings"
)

func main() {
	fmt.Println(findWords([]string{"Hello", "Alaska", "Dad", "Peace"}))
}

func findWords(words []string) []string {
	// letters on each row of a U.S. English QWERTY keboard
	row1 := map[rune]int{'q': 1, 'w': 1, 'e': 1, 'r': 1, 't': 1, 'y': 1, 'u': 1, 'i': 1, 'o': 1, 'p': 1}
	row2 := map[rune]int{'a': 1, 's': 1, 'd': 1, 'f': 1, 'g': 1, 'h': 1, 'j': 1, 'k': 1, 'l': 1}
	row3 := map[rune]int{'z': 1, 'x': 1, 'c': 1, 'v': 1, 'b': 1, 'n': 1, 'm': 1}

	// initialize empty slice to build result
	result := []string{}

	// per word in input slice
	for _, word := range words {
		// transform to lowercase rune slice
		word1 := strings.ToLower(word)
		word_runes := []rune(word1)

		// check if the full word is present in any one of the keyboard rows
		if allIn(word_runes, row1) {
			result = append(result, word)
		} else if allIn(word_runes, row2) {
			result = append(result, word)
		} else if allIn(word_runes, row3) {
			result = append(result, word)
		}
	}

	return result
}

// check if all elements of a  given slice of runes (r1) exist in a given map of rune keys (r2)
func allIn(r1 []rune, r2 map[rune]int) bool {
	for _, r := range r1 {
		_, found := r2[r]

		if !found {
			return false
		}
	}

	return true
}
